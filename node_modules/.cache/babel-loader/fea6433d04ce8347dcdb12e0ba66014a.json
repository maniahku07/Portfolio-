{"ast":null,"code":"import _objectSpread from \"C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  var protectedKeys = _ref.protectedKeys,\n      needsAnimating = _ref.needsAnimating;\n  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, definition) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$delay = _ref2.delay,\n      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,\n      transitionOverride = _ref2.transitionOverride,\n      type = _ref2.type;\n\n  var _visualElement$makeTa = visualElement.makeTargetAnimatable(definition),\n      _visualElement$makeTa2 = _visualElement$makeTa.transition,\n      transition = _visualElement$makeTa2 === void 0 ? visualElement.getDefaultTransition() : _visualElement$makeTa2,\n      transitionEnd = _visualElement$makeTa.transitionEnd,\n      target = _objectWithoutProperties(_visualElement$makeTa, _excluded);\n\n  var willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  var animations = [];\n  var animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  var _loop = function _loop(key) {\n    var value = visualElement.getValue(key);\n    var valueTarget = target[key];\n\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      return \"continue\";\n    }\n\n    var valueTransition = _objectSpread({\n      delay: delay,\n      elapsed: 0\n    }, transition);\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      var appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n\n      if (appearId) {\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n      }\n    }\n\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    var animation = value.animation;\n\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(function () {\n        return willChange.remove(key);\n      });\n    }\n\n    animations.push(animation);\n  };\n\n  for (var key in target) {\n    var _ret = _loop(key);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(function () {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"names":["frame","transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","definition","delay","transitionOverride","type","makeTargetAnimatable","transition","getDefaultTransition","transitionEnd","target","willChange","getValue","animations","animationTypeState","animationState","getState","value","valueTarget","undefined","valueTransition","elapsed","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all"],"sources":["C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}