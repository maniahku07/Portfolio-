{"ast":null,"code":"import _objectSpread from \"C:/Users/Manish/Desktop/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Manish/Desktop/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { cancelFrame, frame } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n/**\n * A list of values that can be hardware-accelerated.\n */\n\nvar acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nvar sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nvar maxDuration = 20000;\n\nvar requiresPregeneratedKeyframes = function requiresPregeneratedKeyframes(valueName, options) {\n  return options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n};\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n      onComplete = _ref.onComplete,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\n   * TODO: Unify with js/index\n   */\n\n  var hasStopped = false;\n  var resolveFinishedPromise;\n  var currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n\n  var updateFinishedPromise = function updateFinishedPromise() {\n    currentFinishedPromise = new Promise(function (resolve) {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  var keyframes = options.keyframes,\n      _options$duration = options.duration,\n      duration = _options$duration === void 0 ? 300 : _options$duration,\n      ease = options.ease,\n      times = options.times;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    var sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n      repeat: 0,\n      delay: 0\n    }));\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n\n    var t = 0;\n\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    times = undefined;\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    duration: duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease,\n    times: times\n  }));\n\n  var cancelAnimation = function cancelAnimation() {\n    return animation.cancel();\n  };\n\n  var safeCancel = function safeCancel() {\n    frame.update(cancelAnimation);\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n\n  animation.onfinish = function () {\n    value.set(getFinalKeyframe(keyframes, options));\n    onComplete && onComplete();\n    safeCancel();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  return {\n    then: function then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n\n    get speed() {\n      return animation.playbackRate;\n    },\n\n    set speed(newSpeed) {\n      animation.playbackRate = newSpeed;\n    },\n\n    get duration() {\n      return millisecondsToSeconds(duration);\n    },\n\n    play: function play() {\n      if (hasStopped) return;\n      animation.play();\n      /**\n       * Cancel any pending cancel tasks\n       */\n\n      cancelFrame(cancelAnimation);\n    },\n    pause: function pause() {\n      return animation.pause();\n    },\n    stop: function stop() {\n      hasStopped = true;\n      if (animation.playState === \"idle\") return;\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n\n      var currentTime = animation.currentTime;\n\n      if (currentTime) {\n        var _sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n          autoplay: false\n        }));\n\n        value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n\n      safeCancel();\n    },\n    complete: function complete() {\n      return animation.finish();\n    },\n    cancel: safeCancel\n  };\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["cancelFrame","frame","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","onUpdate","onComplete","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","keyframes","duration","times","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","undefined","animation","owner","current","cancelAnimation","cancel","safeCancel","update","onfinish","set","then","reject","time","currentTime","newTime","speed","playbackRate","newSpeed","play","pause","stop","playState","autoplay","setWithVelocity","complete","finish"],"sources":["C:/Users/Manish/Desktop/Portfolio-Website-main/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { cancelFrame, frame } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}