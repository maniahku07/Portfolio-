{"ast":null,"code":"import _classCallCheck from \"C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { frameData } from '../frameloop/data.mjs';\nimport { frame } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\n\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MotionValue);\n\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"10.12.16\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n\n    this.lastUpdated = 0;\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = false;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      var delta = frameData.delta,\n          timestamp = frameData.timestamp;\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        frame.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.events.velocityChange) {\n        _this.events.velocityChange.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.scheduleVelocityCheck = function () {\n      return frame.postRender(_this.velocityCheck);\n    };\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.velocityCheck = function (_ref) {\n      var timestamp = _ref.timestamp;\n\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n\n        if (_this.events.velocityChange) {\n          _this.events.velocityChange.notify(_this.getVelocity());\n        }\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @deprecated\n   */\n\n\n  _createClass(MotionValue, [{\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n      }\n\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      var _this2 = this;\n\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      var unsubscribe = this.events[eventName].add(callback);\n\n      if (eventName === \"change\") {\n        return function () {\n          unsubscribe();\n          /**\n           * If we have no more change listeners by the start\n           * of the next frame, stop active animations.\n           */\n\n          frame.read(function () {\n            if (!_this2.events.change.getSize()) {\n              _this2.stop();\n            }\n          });\n        };\n      }\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect, stopPassiveEffect) {\n      this.passiveEffect = passiveEffect;\n      this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = prev;\n      this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n\n  }, {\n    key: \"jump\",\n    value: function jump(v) {\n      this.updateAndNotify(v);\n      this.prev = v;\n      this.stop();\n      if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.current;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n      return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(startAnimation) {\n      var _this3 = this;\n\n      this.stop();\n      return new Promise(function (resolve) {\n        _this3.hasAnimated = true;\n        _this3.animation = startAnimation(resolve);\n\n        if (_this3.events.animationStart) {\n          _this3.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this3.events.animationComplete) {\n          _this3.events.animationComplete.notify();\n        }\n\n        _this3.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.animation) {\n        this.animation.stop();\n\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.animation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n\n      if (this.stopPassiveEffect) {\n        this.stopPassiveEffect();\n      }\n    }\n  }]);\n\n  return MotionValue;\n}();\n\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"names":["frameData","frame","SubscriptionManager","velocityPerSecond","warnOnce","isFloat","value","isNaN","parseFloat","MotionValue","init","options","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","change","notify","velocityChange","getVelocity","renderRequest","velocityCheck","hasAnimated","owner","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","eventManagers","clear","passiveEffect","stopPassiveEffect","set","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","clearListeners","motionValue"],"sources":["C:/Users/Manish/Desktop/Projects/Portfolio-Website-main/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { frameData } from '../frameloop/data.mjs';\nimport { frame } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.12.16\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}